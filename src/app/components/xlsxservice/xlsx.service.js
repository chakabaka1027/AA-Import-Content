(function() {
	'use strict';

	angular.module('importContent')
		.service('xlsxService', xlsxService);

	/** @ngInject */
	function xlsxService($log, $http, $q) {
		var service = {
			loadWorkbookFromUrl: loadWorkbookFromUrl,
			loadWorkbookFromFile: loadWorkbookFromFile
		};

		return service;

		/* processing array buffers, only required for readAsArrayBuffer; damn you, IE!!! */
		function fixdata(data) {
			var o = "", l = 0, w = 10240;
			for(; l<data.byteLength/w; ++l) o+=String.fromCharCode.apply(null,new Uint8Array(data.slice(l*w,l*w+w)));
			o+=String.fromCharCode.apply(null, new Uint8Array(data.slice(l*w)));
			return o;
		}



		function loadWorkbookFromUrl(url) {
			return $http.get(url, {responseType:'arraybuffer'})
				.then(function(response) {
					var arraybuffer = response.data;

					/* convert data to binary string */
					var data = new Uint8Array(arraybuffer);
					var arr = new Array();
					for(var i = 0; i != data.length; ++i) {
						arr[i] = String.fromCharCode(data[i]);
					}
					var bstr = arr.join("");

					/* Call XLSX */
					var workbook = XLSX.read(bstr, {type:"binary"});

					return workbook;
				});
		}

		// files must be a file list generated by drag/drop or a file input element...
		function loadWorkbookFromFileList(files) {
		}

		// file must be a single file from a file list generated by drag/drop or a file input element...
		function loadWorkbookFromFile(file) {
			var deferred = $q.defer();
			var name = file.name;
			
			var reader = new FileReader();
			var rABS = 'readAsBinaryString' in reader;

			reader.onload = function(e) {
				var data = e.target.result;

				var workbook;
				if(rABS) {
					/* if binary string, read with type 'binary' */
					workbook = XLSX.read(data, {type: 'binary'});
				} else {
					/* if array buffer, convert to base64 */
					var arr = fixdata(data);
					workbook = XLSX.read(btoa(arr), {type: 'base64'});
				}

				/* DO SOMETHING WITH workbook HERE */
				deferred.resolve(workbook);
			};

			if(rABS) {
				reader.readAsBinaryString(file);
			} else {
				reader.readAsArrayBuffer(file);
			}

			return deferred.promise;
		}


	}
})();
